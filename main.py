from urllib import request
from flask import Flask, render_template, request
from werkzeug.utils import secure_filename
import os
import joblib
import numpy as np
from features import PEFeatureExtractor
import pefile


# GLOBAL VARIABLES
# UPLOAD_FOLDER is the path where the PE file is saved.
UPLOAD_FOLDER = os.path.join(os.getcwd(), "uploads")
# PATH_CLASSIFIER is the path where the classifiers are.
PATH_CLASSIFIER = os.path.join(os.getcwd(), "classifiers")

#Import a classifier.
def importClassifier(file_export):
    classifier_clone = joblib.load(file_export)
    return classifier_clone

# Predict a file with a classifier.
def predictFile(model, file_data, feature_version=2):
    extractor = PEFeatureExtractor(feature_version)
    features = np.array(extractor.feature_vector(file_data), dtype=np.float32)
    return model.predict([features])[0]

# Predict the probabilities of malware and bening file.
def predictProbaFile(model, file_data, feature_version=2):
    extractor = PEFeatureExtractor(feature_version)
    features = np.array(extractor.feature_vector(file_data), dtype=np.float32)
    probabilities = model.predict_proba([features])[0]
    for i in range(0, len(probabilities)):
        probabilities[i] = round(probabilities[i]*100, 2)
    return probabilities

# Predict a file with a Threshold.
def predictFileThreshold(model, file_data, threshold, feature_version=2):
    probabilities = predictProbaFile(model, file_data)
    return probabilities[1] >= float(threshold)

# Return the classifier name with the extension ".pkl".
def classifierSelected(classifier,bool):
    if classifier not in ["randomForest", "kNearest", "linearDiscriminant", "logisticRegression", "neuralNet"] or not bool:
        return "randomForest.pkl"
    else:
        return classifier + ".pkl"

# Return a string of the classifier to display in an HTML file. 
def classifierName(classifierSelected):
    if classifierSelected == "randomForest.pkl":
        return "Random Forest"
    elif classifierSelected == "kNearest.pkl":
        return "K vecinos mas cercanos"
    elif classifierSelected == "linearDiscriminant.pkl":
        return "Analisis discriminante lineal"
    elif classifierSelected == "logisticRegression.pkl":
        return "Regresion Logistica"
    elif classifierSelected == "neuralNet.pkl":
        return "Red neuronal"
    else:
        return "invalid"

# Return if a file is a valid PE file.
def isPefile(filename):
    try:
        pe = pefile.PE(filename)
        pe.close()
        return True
    except:
        return False


app = Flask(__name__)
app.config["UPLOAD_FOLDER"] = UPLOAD_FOLDER

# Main page, where a presentation of the project is made.,
@app.route('/')
def index():
    return render_template("main-page.html")

# Page where display the information of the authors
@app.route('/about')
def about():
    return render_template("about-us.html")

# Page where display the information of the project.
@app.route('/projectinformation')
def projectInformation():
    return render_template("about-the-project.html")

# Allows to load the file and analyze it.
@app.route('/upload', methods=["GET", "POST"])
def upload():
    if request.method == "POST":
        if "ourfile" not in request.files:
            return render_template("analyze-file.html", tryAgain="Inténtelo de nuevo, seleccione un fichero por favor")
        f = request.files["ourfile"]
        # Choose the classifier with a ".pkl" extension.
        clfSelected = classifierSelected(request.form.get('classic'),request.form.get('switch_1'))
        #Save on a clfName a string of the classifier to display in an HTML file 
        clfName = classifierName(clfSelected)
        # If user hit to "enviar" and not send a file.
        if f.filename == "":
            return render_template("analyze-file.html", tryAgain="Inténtelo de nuevo, seleccione un fichero por favor")
        # If request not contains a name of a valid classifier.
        if clfName == "invalid":
            return render_template("analyze-file.html", tryAgain="Inténtelo de nuevo, seleccione un clasificador por favor")
        # Secure the filename before the storage.
        filename = secure_filename(f.filename)
        # Store the file on the defined path. 
        f.save(os.path.join(app.config["UPLOAD_FOLDER"], filename))
        
        # If the user up a file and it is a valid PE, then start to analyze it.
        if f and isPefile(os.path.join(app.config["UPLOAD_FOLDER"], filename)):
            # Load the bytes of the file.
            file_to_predict = open(os.path.join(
                app.config["UPLOAD_FOLDER"], filename), "rb").read()
            # Remove the file.
            os.remove(os.path.join(app.config["UPLOAD_FOLDER"], filename))
            
            # STARTED WITH THE FILE ANALYSIS
            # Firstly, import the classifier selected by the user.
            clf = importClassifier(os.path.join(
                PATH_CLASSIFIER, clfSelected))
            # If the user has selected a threshold
            if request.form.get('threshold') != "" and request.form.get('switch_2'):
                # Predict with the selected threshold
                threshold = request.form.get('threshold')
                result = predictFileThreshold(clf, file_to_predict, threshold)
                probabilities = predictProbaFile(clf, file_to_predict)
                # If result is true return malware, but if it is false, return bening.
                if result:
                    return render_template("malware.html", classifierName=clfName, probBening=str(probabilities[0])+"%", probMalware=str(probabilities[1])+"%")
                else:
                    return render_template("benign.html", classifierName=clfName, probBening=str(probabilities[0])+"%", probMalware=str(probabilities[1])+"%")
            else:
                # Normal prediction.
                result = predictFile(clf, file_to_predict)
                probabilities = predictProbaFile(clf, file_to_predict)
                # If result is 1 return malware, but if it is 0, return bening.
                if result == 0.0:
                    return render_template("benign.html", classifierName=clfName, probBening=str(probabilities[0])+"%", probMalware=str(probabilities[1])+"%")
                else:
                    return render_template("malware.html", classifierName=clfName, probBening=str(probabilities[0])+"%", probMalware=str(probabilities[1])+"%")
        # If the file isn't a valid PE, display that is not allowed.
        os.remove(os.path.join(app.config["UPLOAD_FOLDER"], filename))
        return render_template("analyze-file.html", tryAgain="Inténtelo de nuevo, fichero no permitido, recuerde solo PE ejecutables")
    return render_template("analyze-file.html")


if __name__ == '__main__':
    app.run(host='0.0.0.0')
